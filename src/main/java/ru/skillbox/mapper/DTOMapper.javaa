package ru.skillbox.mapper;

import ru.skillbox.dto.CommentDTO;
import ru.skillbox.dto.PostDto;
import ru.skillbox.dto.UserDTO;
import ru.skillbox.model.Comment;
import ru.skillbox.model.User;
import ru.skillbox.model.Post;
import ru.skillbox.repository.NewsRepository;
import ru.skillbox.repository.UserRepository;
import ru.skillbox.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class DTOMapper {

    private final UserService userService;
    private final UserRepository userRepository;
    private final NewsRepository newsRepository;

    @Autowired
    public DTOMapper(UserService userService, UserRepository userRepository, NewsRepository newsRepository) {
        this.userService = userService;
        this.userRepository = userRepository;
        this.newsRepository = newsRepository;
    }

    public UserDTO convertToDTO(User user) {
        UserDTO userDTO = new UserDTO();
        userDTO.setId(user.getId());
        userDTO.setUsername(user.getUsername());
        userDTO.setEmail(user.getEmail());
        userDTO.setPassword(user.getPassword());
        return userDTO;
    }

    public User convertToEntity(UserDTO userDTO) {
        User user = new User();
        user.setUsername(userDTO.getUsername());
        user.setEmail(userDTO.getEmail());
        user.setPassword(userDTO.getPassword());
        return user;
    }

    public NewsDTO convertToDTO(News post) {
        NewsDTO postDto = new NewsDTO();
        postDto.setId(post.getId());
        postDto.setTitle(post.getTitle());
        postDto.setPostText(post.getPostText());
        postDto.setAuthorId(post.getAuthor().getId());
        List<CommentDTO> commentDTOList = post.getComments().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
        postDto.setComments(commentDTOList);
        return postDto;
    }

    public News convertToEntity(NewsDTO postDto) {
        News post = new News();
        post.setTitle(postDto.getTitle());
        post.setPostText(postDto.getPostText());
        post.setAuthor(userRepository.getById(postDto.getAuthorId()));
        List<Comment> comments = postDto.getComments().stream()
                .map(commentDTO -> {
                    Comment comment = new Comment();
                    comment.setContent(commentDTO.getContent());
                    comment.setAuthor(userService.getUserById(commentDTO.getAuthorId()));
                    comment.setNews(post);
                    return comment;
                })
                .collect(Collectors.toList());
        post.setComments(comments);
        return post;
    }

    public CommentDTO convertToDTO(Comment comment) {
        CommentDTO commentDTO = new CommentDTO();
        commentDTO.setId(comment.getId());
        commentDTO.setContent(comment.getContent());
        commentDTO.setAuthorId(comment.getAuthor().getId());
        commentDTO.setNews(comment.getNews().getId());
        return commentDTO;
    }

    public Comment convertToEntity(CommentDTO commentDTO) {
        Comment comment = new Comment();
        comment.setContent(commentDTO.getContent());
        comment.setAuthor(userService.getUserById(commentDTO.getAuthorId()));
        comment.setNews(newsRepository.getById(commentDTO.getNews()));
        return comment;
    }
}
